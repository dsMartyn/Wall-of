<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/halo" 
		 xmlns:utils="com.utils.*"
		 width="502" height="25"
		 >

	
	
	<fx:Metadata>
		/** raise mouse click event only if mouse has clicked within region */	
		[Event(name="buttonClick",type="com.events.ToolBarEvent")]
		
		/** raise mouse over event only if mouse has clicked within region */	
		[Event(name="buttonOver",type="com.events.ToolBarEvent")]
		
		
		/** raise seek to when nuget is moved */
		[Event(name="seekTo",type="com.events.ToolBarEvent")]
		
		/** raise volume to when volume is moved */
		[Event(name="volumeTo",type="com.events.ToolBarEvent")]
		
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.events.ToolBarEvent;
			
			//video tool bar stuff...
			
			private var pn_Down:Boolean = false;
			private var pn_Max:Number=0;
			private var pn_Val:Number=0;
			private var pn_StartX:Number=0;
			
			
			protected function button_Click(event:ToolBarEvent):void
			{
				dispatchEvent(new ToolBarEvent(ToolBarEvent.BUTTON_CLICK, event.buttonType));
			}
			
			protected function button_Over(event:ToolBarEvent):void
			{
				dispatchEvent(new ToolBarEvent(ToolBarEvent.BUTTON_OVER, event.buttonType));
			}
			
			public function SetStartX(v:Number):void
			{
				pn_StartX = v;
			}
			
			public function Max(v:Number):void
			{
				pn_Max = v;
			}
			
			public function SetValue(v:Number):void
			{
				pn_Val = v;
				prgDone.width = ( (pn_Val / pn_Max) * prgEmpty.width) ;
				
				if (!pn_Down)
					nuget.x = (prgDone.x + prgDone.width) - (nuget.width / 2);
				lblTime.text = convertMillisecondsToMMSS (pn_Val ) + " / " +  convertMillisecondsToMMSS(pn_Max );
				
			}
			
			public function convertMillisecondsToMMSS(millisecs:Number):String {
				var min:Number;
				var sec:Number;
				var minStr:String;
				var secStr:String;
				
				var lenSec:Number = millisecs/1000;
				
				if (lenSec <=0) {
					return "00:00";
				}
				else if(lenSec > (99*60)+59){ // greater than can be shown in 99:59
					return "99:59";
				}
				else {
					// work out how many minutes and seconds and concatenate them for the time
					min = Math.floor(lenSec/60); //get the number of minutes
					sec = Math.round(lenSec%60); //get the remainder 0-59 secs
					
					// convert to strings
					minStr = min.toString();
					secStr = sec.toString();
					
					// if minStr is 2 character, leave it alone, if it's 1 char, pad it, if it's more than 2 make it "99"
					if (minStr.length == 1) {
						minStr = "0" + minStr;
					}
					else if (minStr.length > 2) {
						minStr = "99"; // this is impossible!
					}
					// if secStr is 2 digits, leave it alone, if it's 1, pad it, if it's more than 2 make it "99"
					if (secStr.length == 1) {
						secStr = "0" + secStr;
					}
					else if (secStr.length > 2) {
						secStr = "59"; // this is impossible!
					}
					
					return minStr + ":" + secStr;
				}
			}


			
			
			protected function prg_MouseMove(event:MouseEvent):void
			{
				if (!pn_Down)
					return;
				
			//	trace( ((  ( (nuget.x-prgDone.x)+(nuget.width/2) ) / prgEmpty.width) * pn_Max ));
				
				if ( ((  ( (nuget.x-prgDone.x)+(nuget.width/2) ) / prgEmpty.width) * pn_Max ) <= 0)
					return;
				
				if ( ((  ( (nuget.x-prgDone.x)+(nuget.width/2) ) / prgEmpty.width) * pn_Max ) > pn_Max)
					return;
				
				nuget.x = prgDone.x + ( (event.stageX - (pn_StartX + prgEmpty.x)) - nuget.width / 2);
			}

			protected function prg_MouseUp(event:MouseEvent):void
			{

				if ( ((  ( (nuget.x-prgDone.x)+(nuget.width/2) ) / prgEmpty.width) * pn_Max ) > pn_Max)
					return;
				
				if ( ((  ( (nuget.x-prgDone.x)+(nuget.width/2) ) / prgEmpty.width) * pn_Max ) <= 0)
					return;
				
				trace(pn_StartX);
				nuget.x = prgDone.x + ( (event.stageX - (pn_StartX + prgEmpty.x)) - (nuget.width / 2));

				dispatchEvent(new ToolBarEvent(ToolBarEvent.SEEK_TO, null,  ( ((nuget.x-prgDone.x)+(nuget.width/2)) / prgEmpty.width) * pn_Max ) );
				
				trace ( convertMillisecondsToMMSS(  ( ((nuget.x-prgDone.x)+(nuget.width/2)) / prgEmpty.width) * pn_Max ) )  ;
				pn_Down = false;
				
				
			}
			private var pn_IntervalID:Number;
			
			protected function Volume_Over(event:ToolBarEvent):void
			{
				button_Over(event);
				prgVolume.visible = true;
				clearInterval(pn_IntervalID);
				pn_IntervalID = setInterval(HideVolume,1000 );
				
			}
			
			protected function HideVolume():void
			{
				prgVolume.visible = false;
				clearInterval(pn_IntervalID);
			}
			
			protected function sld_Move(e:MouseEvent):void
			{
				clearInterval(pn_IntervalID);
				pn_IntervalID = setInterval(HideVolume,1000 );
			}

			protected function prgVolume_change(event:Event):void
			{
				dispatchEvent(new ToolBarEvent(ToolBarEvent.VOLUME_TO, null, prgVolume.value));
			}

		]]>
	</fx:Script>
	
	<mx:Image source="@Embed('assets/embedded/player/background.png')" height="25" width="{this.width}"  maintainAspectRatio="false" />
	<utils:PlayerButton buttonClick="button_Click(event)"  buttonOver="button_Over(event)" id="btnPlay" initialize="btnPlay.SetButtonType(com.utils.ButtonType.PLAY);"  width="16" height="15" x="8" y="6" />
	<mx:Image source="@Embed('assets/embedded/player/Seperator.png')" width="3" height="25" x="28" y="0"/>
	
	<mx:Image id="prgEmpty"  mouseDown="prg_MouseUp(event)" source="@Embed('assets/embedded/player/prgEmpty.png')" height="13" maintainAspectRatio="false" right="165" top="8" left="35"/>
	<mx:Image id="prgDone"  mouseDown="prg_MouseUp(event)" source="@Embed('assets/embedded/player/prgDone.png')" height="7" width="10"  maintainAspectRatio="false"  x="35" y="8"/>
	<mx:Image id="nuget" mouseMove="prg_MouseMove(event)" mouseDown="pn_Down=true" mouseUp="prg_MouseUp(event);" mouseOut="pn_Down=false"  source="@Embed('assets/embedded/player/nugit.png')"   x="33" y="-2"/>
	<s:VSlider y="-95" value="50" maximum="100" minimum="0" mouseMove="sld_Move(event)" change="prgVolume_change(event)" height="99" right="74" width="11" id="prgVolume" visible="false"/>
	
	<s:Border id="brdTool" width="104" height="25" right="1" top="0" borderVisible="false" >
		
		<mx:Image source="@Embed('assets/embedded/player/Seperator.png')" width="3" height="25" x="7" y="0"/>		
		<utils:PlayerButton buttonClick="button_Click(event)" buttonOver="Volume_Over(event)" id="btnVolume" initialize="btnVolume.SetButtonType(com.utils.ButtonType.VOLUME);"  width="30" height="20"  x="10" y="4" />
		
		<mx:Image source="@Embed('assets/embedded/player/Seperator.png')" width="3" height="25" x="38" y="0"/>
		<utils:PlayerButton buttonClick="button_Click(event)" buttonOver="button_Over(event)" id="btnQuality" initialize="btnQuality.SetButtonType(com.utils.ButtonType.QUALITY);"  width="31" height="22"  x="42" y="3"/>

		<mx:Image source="@Embed('assets/embedded/player/Seperator.png')" width="3" height="25" x="70" y="0"/>
		<utils:PlayerButton buttonClick="button_Click(event)" buttonOver="button_Over(event)" id="btnFullScreen" initialize="btnFullScreen.SetButtonType(com.utils.ButtonType.FULLSCREEN);"  width="30" height="22" x="78" y="3"/>
				
	</s:Border>
	<s:Label id="lblTime" text="00:00 / 00:00" fontFamily="Arial" fontSize="9" top="9" right="104"/>
	
	
		
</s:Group>
